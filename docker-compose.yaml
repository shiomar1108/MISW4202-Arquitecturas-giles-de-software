version: "3.2"
services:
  rabbitmq_broker:
    build: 
      context: .
      dockerfile: ./RabbitMQ/Dockerfile
    container_name: rabbitmq_broker
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - ccpnetwork

  mcs_ventas:
    image: mcs_ventas:latest
    volumes:
        - ./Ventas/security.key/:/backend/security.key
        - ./Ventas/app-config.properties/:/backend/app-config.properties
        - ./Ventas/log_transactions_post.txt/:/backend/log_transactions_post.txt
        - ./Ventas/log_transactions_put.txt/:/backend/log_transactions_put.txt
    build: ./Ventas
    working_dir: /backend/
    command: python app.py
    container_name: mcs_ventas
    #ports:
    #  - "5000:5000"
    networks:
      - ccpnetwork
    depends_on: 
      - rabbitmq_broker

  mcs_registro_ventas_post:
    image: mcs_registro_ventas_post:latest
    volumes:
        - ./RegistroVentasPost/security.key/:/backend/security.key
        - ./RegistroVentasPost/log_post_orders.txt/:/backend/log_post_orders.txt
        - ./RegistroVentasPost/app-config.properties/:/backend/app-config.properties
    build: ./RegistroVentasPost
    working_dir: /backend/
    command: python app.py
    container_name: mcs_registro_ventas_post
    networks:
      - ccpnetwork
    depends_on: 
      - rabbitmq_broker

  mcs_registro_ventas_put:
    image: mcs_registro_ventas_put:latest
    volumes:
        - ./RegistroVentasPut/security.key/:/backend/security.key
        - ./RegistroVentasPut/app-data.json/:/backend/app-data.json
        - ./RegistroVentasPut/log_put_orders.txt/:/backend/log_put_orders.txt
        - ./RegistroVentasPut/app-config.properties/:/backend/app-config.properties
    build: ./RegistroVentasPut
    working_dir: /backend/
    command: python app.py
    container_name: mcs_registro_ventas_put
    networks:
      - ccpnetwork
    depends_on: 
      - rabbitmq_broker

#  nginx_proxy_reverse:
#    image: nginx:latest
#    container_name: nginx_proxy_reverse
#    ports:
#        - 8080:8080
#    volumes:
#        - ./NginxProxyReverse/nginx-proxy.conf:/etc/nginx/conf.d/default.conf:ro
#    networks:
#      - ccpnetwork
#    depends_on:
#        - mcs_ventas        
#        - mcs_registro_ventas_post
#        - mcs_registro_ventas_put
  mcs_usuario:
    image: mcs_usuario:latest
    volumes:
        - ./usuarios/instance/dbapp.sqlite/:/usuarios/instance/dbapp.sqlite    
    build: ./usuarios
    working_dir: /usuarios
    command: python api.py
    container_name: mcs_usuario
    #ports:
    #  - "6600:6600"
    networks:
      - ccpnetwork
 

  mcs_rutas:
    image: mcs_rutas:latest  
    build: ./RutaClientes
    working_dir: /rutas
    command: python base.py
    container_name: mcs_rutas
    #ports:
    #  - "5000:5000"
    networks:
      - ccpnetwork
    depends_on:
      - mcs_usuario

  krakend_ce:
    # The :watch image restarts the service automatically when the configuration files change.
    # Do not use this image in production, it's meant to speed up your testing and development.
    image: devopsfaith/krakend:watch
    volumes:
      - ./config/krakend:/etc/krakend
    ports:
      - "1234:1234"
      - "8080:8080"
      - "8090:8090"
    command: ["run", "-d", "-c", "/etc/krakend/krakend.json"]
    networks:
      - ccpnetwork
  grafana:
    image: grafana/grafana:9.1.2
    ports:
      - "4000:3000"
    volumes:
      - "./config/grafana/datasources/all.yml:/etc/grafana/provisioning/datasources/all.yml"
      - "./config/grafana/dashboards/all.yml:/etc/grafana/provisioning/dashboards/all.yml"
      - "./config/grafana/krakend:/var/lib/grafana/dashboards/krakend"
  influxdb:
    image: influxdb:1.8.10
    environment:
      - "INFLUXDB_DB=krakend"
      - "INFLUXDB_USER=krakend-dev"
      - "INFLUXDB_USER_PASSWORD=pas5w0rd"
      - "INFLUXDB_ADMIN_USER=admin"
      - "INFLUXDB_ADMIN_PASSWORD=supersecretpassword"
    ports:
      - "8086:8086"
#  jaeger:
#    container_name: jaeger
#    image: jaegertracing/all-in-one:1
#    ports:
#      - "16686:16686"
#      - "14268:14268"
#    networks:
#      - ccpnetwork

#  kibana:
#    image: kibana:8.4.1
#    ports:
#      - "5601:5601"
#    networks:
#      - ccpnetwork

networks: 
    ccpnetwork:
      driver: bridge